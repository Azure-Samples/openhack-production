jobs:
  - job: BuildJob
    displayName: Build & Validate API
    steps:
      - task: UseDotNet@2
        displayName: Dotnet version 3.1.100
        inputs:
          version: '3.1.100'

      - task: DotNetCoreCLI@2
        displayName: Build API
        inputs:
          command: build
          projects: '**/*.csproj'
          arguments: '--configuration Release'

      - task: DotNetCoreCLI@2
        displayName: Run Unit Tests
        condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
        inputs:
          command: test
          projects: '**/LinkyLink.Tests/*.csproj'
          arguments: -c $(BuildConfiguration) --collect:"XPlat Code Coverage"

      # Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
      - script: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
        displayName: Create Code coverage report
        condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

      - task: PublishCodeCoverageResults@1
        displayName: Publish Code Coverage
        condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml 
          failIfCoverageEmpty: true

      - task: BuildQualityChecks@6
        displayName: Validate Code Coverage Quality
        condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
        inputs:
          checkCoverage: true
          coverageFailOption: 'fixed'
          coverageType: 'lines'
          coverageThreshold: '76'

      - task: DotNetCoreCLI@2
        displayName: Package Build Artifacts
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          command: publish
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
          zipAfterPublish: True

      - task: PublishBuildArtifacts@1
        displayName: Publish Build Artifacts
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
          artifactName: 'drop'
          publishLocation: 'Container'

